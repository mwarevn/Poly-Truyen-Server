<script src="/js/support.js"></script>
<div class="divider sdivider-neutral"></div>
<div class="flex items-center justify-between">
  <h3 class="font-bold text-xl">Member Manager</h3>
  <div class="btn btn-sm btn-neutral btn-add-new">Thêm thành viên +</div>
</div>
<div class="divider sdivider-neutral"></div>

<!-- modal user editor -->
<dialog id="modal_user_editor" class="modal modal-bottom sm:modal-middle">
  <div class="modal-box">
    <h3 class="font-bold text-lg">User Editor</h3>

    <form id="form-user-editor" method="POST" class="modal-body">
      <label class="mt-4 input input-bordered flex items-center gap-2">
        <input name="fullName" type="text" class="grow" placeholder="Full Name" autocomplete="off" required />
      </label>

      <label class="mt-4 input input-bordered flex items-center gap-2">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="w-4 h-4 opacity-70">
          <path d="M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6ZM12.735 14c.618 0 1.093-.561.872-1.139a6.002 6.002 0 0 0-11.215 0c-.22.578.254 1.139.872 1.139h9.47Z" />
        </svg>
        <input name="username" type="text" class="grow" placeholder="Username" autocomplete="off" required />
      </label>

      <label class="mt-4 input input-bordered flex items-center gap-2">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="w-4 h-4 opacity-70">
          <path d="M2.5 3A1.5 1.5 0 0 0 1 4.5v.793c.026.009.051.02.076.032L7.674 8.51c.206.1.446.1.652 0l6.598-3.185A.755.755 0 0 1 15 5.293V4.5A1.5 1.5 0 0 0 13.5 3h-11Z" />
          <path d="M15 6.954 8.978 9.86a2.25 2.25 0 0 1-1.956 0L1 6.954V11.5A1.5 1.5 0 0 0 2.5 13h11a1.5 1.5 0 0 0 1.5-1.5V6.954Z" />
        </svg>
        <input name="email" type="email" class="grow" placeholder="Email" autocomplete="off" required />
      </label>

      <label class="mt-4 input input-bordered flex items-center gap-2">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="w-4 h-4 opacity-70">
          <path fill-rule="evenodd" d="M14 6a4 4 0 0 1-4.899 3.899l-1.955 1.955a.5.5 0 0 1-.353.146H5v1.5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-2.293a.5.5 0 0 1 .146-.353l3.955-3.955A4 4 0 1 1 14 6Zm-4-2a.75.75 0 0 0 0 1.5.5.5 0 0 1 .5.5.75.75 0 0 0 1.5 0 2 2 0 0 0-2-2Z" clip-rule="evenodd" />
        </svg>
        <input name="password" type="password" class="grow" placeholder="password" autocomplete="off" required />
      </label>

      <label class="label cursor-pointer mt-4">
        <span class="label-text">Promote this user to admin?</span>
        <input name="role" type="checkbox" class="toggle toggle-primary" />
      </label>

      <button type="reset" class="btn-reset" hidden></button>
    </form>
    <div class="modal-action">
      <form method="dialog" class="close-modal">
        <button class="btn">Close</button>
      </form>
      <button class="btn btn-neutral btn-success btn-save-change" type="button">Save</button>
    </div>
  </div>
</dialog>

<!-- Table -->
<div class="overflow-x-auto mb-5 min-h-screen">
  <table class="table">
    <thead>
      <tr>
        <th>#</th>
        <th>Họ và tên / username</th>
        <th>Email</th>
        <th>Ngày Tạo</th>
        <th>Role</th>
        <th></th>
        <th></th>
      </tr>
    </thead>
    <tbody></tbody>
  </table>
</div>

<script>
  // variables
  let LIST_USERS = [];
  let CURRENT_ID = null;
  const tbody = document.querySelector("tbody");
  const btnAddNew = document.querySelector(".btn-add-new");
  const modalUserEditor = document.getElementById("modal_user_editor");
  const formEditUser = document.getElementById("form-user-editor");
  const btnSaveChange = document.querySelector(".btn-save-change");
  const inputs = formEditUser.querySelectorAll("input");
  const btnReset = modalUserEditor.querySelector(".btn-reset");
  const closeModal = document.querySelector(".close-modal");

  closeModal.onsubmit = (e) => {
    e.preventDefault();
    btnReset.click();
    closeModal.submit();
    CURRENT_ID = null;
  };

  btnAddNew.onclick = () => modalUserEditor.showModal();

  const setEditUser = (i) => {
    CURRENT_ID = LIST_USERS[i]._id;

    inputs[0].value = LIST_USERS[i].fullName;
    inputs[1].value = LIST_USERS[i].username;
    inputs[2].value = LIST_USERS[i].email;
    inputs[3].value = LIST_USERS[i].password;
    inputs[4].checked = LIST_USERS[i].role == "admin";
    modalUserEditor.showModal();
  };

  const setRemoveUser = (i) => {
    Swal.fire({
      title: "Are you sure?",
      text: "You won't be able to revert this!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Yes, delete it!",
    }).then((result) => {
      if (result.isConfirmed) {
        fetch("/user/delete/" + LIST_USERS[i]._id, {
            method: "DELETE",
          })
          .then((res) => res.json())
          .then((res) => {
            if (!res.msg) {
              Swal.fire({
                title: "Deleted!",
                text: "Your file has been deleted.",
                icon: "success",
              }).then((callback) => {
                if (callback.isConfirmed) {
                  window.location.reload();
                }
              });
            } else {
              Toastify({
                text: res.msg,
                duration: 3000,
                close: true,
                gravity: "bottom",
                position: "center",
                stopOnFocus: true,
                style: {
                  background: "red",
                },
              }).showToast();
            }
          });
      }
    });
  };

  btnSaveChange.onclick = () => {
    var userPayload = {
      fullName: inputs[0].value,
      username: inputs[1].value,
      email: inputs[2].value,
      password: inputs[3].value,
      role: inputs[4].checked ? "admin" : "user",
    };

    var route = null,
      method = null;

    if (CURRENT_ID) {
      route = "/user/update/" + CURRENT_ID;
      method = "PUT";
    } else {
      route = "/user/create";
      method = "POST";
    }

    fetch(route, {
        method: method,
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(userPayload),
      })
      .then((res) => res.json())
      .then((res) => {
        if (res.msg) {
          alert(res.msg);
          return;
        } else {
          window.location.reload();
        }
      });
  };

  // get all user and fill to table
  const fillUsersToTable = () => {
    tbody.innerHTML = LIST_USERS.map((e, i) => {
      return `
            <tr class="hover">
                <th>${i + 1}</th>
                <td style="display: flex; align-items: center">
					<img style='width: 60px; height: 60px' src="images/${e.avatar}" class="avatar avatar-sm rounded-full" alt="avatar" />
					<div class="ms-2">
						<div class="view-full-name ">${e.fullName}</div>
                		<div class="view-user-name text-sm text-slate-500">${e.username}</div>	
					</div>
                </td>
                <td>${e.email}</td>
                <td>${convertDateTime(e.createdAt || new Date())}</td>
                <td>${
					e.role == "admin" ? '<div class="badge badge-secondary text-white">admin</div>' : "basic user"
				}</td>
                <td>
                <div class="flex">
                    <!-- btn edit -->
                    <button onclick="setEditUser('${i}')" class="btn btn-ghost btn-circle">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M9.53 16.122a3 3 0 0 0-5.78 1.128 2.25 2.25 0 0 1-2.4 2.245 4.5 4.5 0 0 0 8.4-2.245c0-.399-.078-.78-.22-1.128Zm0 0a15.998 15.998 0 0 0 3.388-1.62m-5.043-.025a15.994 15.994 0 0 1 1.622-3.395m3.42 3.42a15.995 15.995 0 0 0 4.764-4.648l3.876-5.814a1.151 1.151 0 0 0-1.597-1.597L14.146 6.32a15.996 15.996 0 0 0-4.649 4.763m3.42 3.42a6.776 6.776 0 0 0-3.42-3.42" />
                    </svg>
                    </button>
                    <!-- btn remove -->
                    <button onclick="setRemoveUser('${i}')" class="btn btn-ghost btn-circle">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                        <path stroke-linecap="round" stroke-linejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
                    </svg>
                    </button>
                </div>
                </td>
            </tr>
            `;
    }).join("");
  };

  fetch("/user/get-all")
    .then((res) => res.json())
    .then((res) => {
      LIST_USERS = res;
      return res;
    })
    .then((res) => {
      fillUsersToTable();
    });
</script>